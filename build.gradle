/*
 * Copyright 2015 Guillermo Orellana Ruiz
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.2'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath 'me.tatarka:gradle-retrolambda:3.2.5'
        classpath 'me.tatarka.retrolambda.projectlombok:lombok.ast:0.2.3.a2'
        classpath 'com.jakewharton.hugo:hugo-plugin:1.2.1'
        classpath 'com.fernandocejas.frodo:frodo-plugin:0.8.2'
    }
    configurations.classpath.exclude group: 'com.android.tools.external.lombok'
}

allprojects {
    repositories {
        jcenter()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }

        maven {
            url "https://jitpack.io"
        }

        maven {
            url 'https://clojars.org/repo/'
        }
    }
    tasks.withType(JavaForkOptions) {
        jvmArgs '-Djava.awt.headless=true'
    }
}

ext {
    minSdk = 16
    targetSdk = 23
    compileSdkVersion = 23
    buildToolsVersion = '23.0.3'

    preDexLibs = !project.hasProperty('disablePreDex')

    javaSourceCompatibility = JavaVersion.VERSION_1_8
    javaTargetCompatibility = JavaVersion.VERSION_1_8

    supportLibsVersion = '23.3.0'
    daggerVersion = '2.2'
    okHttpVersion = '3.2.0'
    retrofitVersion = '2.0.0-beta4'
    espressoVersion = '2.2.2'
    stethoVersion = '1.3.1'
    dbflowVersion = 'fix'
}


ext.libraries = [
        dagger                  : "com.google.dagger:dagger:$daggerVersion",
        daggerCompiler          : "com.google.dagger:dagger-compiler:$daggerVersion",
        javaxInject             : "javax.inject:javax.inject:1",
        javaxAnnotationApi      : "javax.annotation:javax.annotation-api:1.2",

        rxJava                  : "io.reactivex:rxjava:1.1.0",
        rxAndroid               : "io.reactivex:rxandroid:1.0.1",
        rxBinding               : 'com.jakewharton.rxbinding:rxbinding:0.3.0',
        rxBindingV7             : 'com.jakewharton.rxbinding:rxbinding-appcompat-v7:0.3.0',

        okHttp                  : "com.squareup.okhttp3:okhttp:$okHttpVersion",
        okHttpLoggingInterceptor: "com.squareup.okhttp3:logging-interceptor:$okHttpVersion",
        retrofit                : "com.squareup.retrofit2:retrofit:$retrofitVersion",
        retrofitGsonConverter   : "com.squareup.retrofit2:converter-gson:$retrofitVersion",
        retrofitRxJavaAdapter   : "com.squareup.retrofit2:adapter-rxjava:$retrofitVersion",
        moshi                   : "com.squareup.moshi:moshi:1.0.0",

        autoValue               : "com.google.auto.value:auto-value:1.1",
        jodaTimeAndroid         : "net.danlew:android.joda:2.9.0",

        supportAnnotations      : "com.android.support:support-annotations:$supportLibsVersion",
        supportAppCompat        : "com.android.support:appcompat-v7:$supportLibsVersion",
        supportDesign           : "com.android.support:design:$supportLibsVersion",
        supportRecyclerView     : "com.android.support:recyclerview-v7:$supportLibsVersion",
        supportCardView         : "com.android.support:cardview-v7:$supportLibsVersion",

        butterKnife             : "com.jakewharton:butterknife:7.0.1",
        picasso                 : "com.squareup.picasso:picasso:2.5.2",
        timber                  : "com.jakewharton.timber:timber:4.1.0",

        mosby                   : "com.hannesdorfmann.mosby:mvp:2.0.0",
        mosbyViewstate          : "com.hannesdorfmann.mosby:viewstate:2.0.0",
        fragmentargs            : "com.hannesdorfmann.fragmentargs:annotation:3.0.0",
        fragmentargsProcessor   : "com.hannesdorfmann.fragmentargs:processor:3.0.0",

        dbflowProcessor         : "com.github.wiyarmir.DBFlow:dbflow-processor:$dbflowVersion",
        dbflowCore              : "com.github.wiyarmir.DBFlow:dbflow-core:$dbflowVersion",
        dbflow                  : "com.github.wiyarmir.DBFlow:dbflow:$dbflowVersion",

        // Developer Tools
        stetho                  : "com.facebook.stetho:stetho:$stethoVersion",
        stethoOkHttp            : "com.facebook.stetho:stetho-okhttp:$stethoVersion",
        leakCanary              : "com.squareup.leakcanary:leakcanary-android:1.4-beta2",
        leakCanaryNoOp          : "com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2",
        tinyDancer              : "com.github.brianPlummer:tinydancer:0.0.7",

        // Test dependencies
        junit                   : "junit:junit:4.12",
        robolectric             : "org.robolectric:robolectric:3.0",
        assertJ                 : "org.assertj:assertj-core:1.7.1",
        equalsVerifier          : "nl.jqno.equalsverifier:equalsverifier:1.7.5",
        okHttpMockWebServer     : "com.squareup.okhttp3:mockwebserver:$okHttpVersion",
        mockitoCore             : "org.mockito:mockito-core:1.10.19",
        supportTestRunner       : "com.android.support.test:runner:0.4.1",
        supportTestRules        : "com.android.support.test:rules:0.4.1",
        espressoCore            : "com.android.support.test.espresso:espresso-core:$espressoVersion",
        espressoContrib         : "com.android.support.test.espresso:espresso-contrib:$espressoVersion",
]

subprojects {
    project.plugins.whenPluginAdded { plugin ->
        if ('com.android.build.gradle.AppPlugin'.equals(plugin.class.name) || 'com.android.build.gradle.LibraryPlugin'.equals(plugin.class.name)) {
            // enable or disable pre-dexing
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }

    plugins.apply('pmd')

    task pmd(type: Pmd, group: 'verification') {
        ignoreFailures = false // Fail early.
        ruleSets = ['java-basic', 'java-braces', 'java-strings', 'java-design', 'java-unusedcode']

        source = fileTree('src/main/java')
    }

    plugins.apply('findbugs')

    task findbugs(type: FindBugs, group: 'verification') {
        ignoreFailures = false // Fail early.
        effort = 'default'
        reportLevel = 'low' // Report even low priority problems.

        classes = files("${project.projectDir}/build/intermediates/classes/release")
        source = fileTree('src/main/java')

        // If somebody has an idea how to make this work with support libraries -> open a PR please.
        classpath = files()

        excludeFilter = rootProject.file('findbugs-filter.xml')

        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    plugins.apply('checkstyle')

    task checkstyle(type: Checkstyle, group: 'verification') {
        configFile rootProject.file('checkstyle.xml')

        ignoreFailures false // Fail early.
        showViolations true

        source 'src'
        include '**/*.java'

        classpath = files()
    }

    task checkstyleHtml(group: 'verification') << {
        def path = "${project.buildDir}/reports/checkstyle/"
        ant.xslt(in: path + 'checkstyle.xml',
                style: rootProject.file("config/checkstyle-noframes-sorted.xsl"),
                out: new File(path, 'checkstyle.html'))
    }

    afterEvaluate {
        tasks.findByName('pmd').dependsOn('assemble')
        tasks.findByName('findbugs').dependsOn('assemble')

        def checkTask = tasks.findByName('check')

        checkTask.dependsOn('pmd')
        checkTask.dependsOn('findbugs')
        checkTask.dependsOn('checkstyle')
        checkTask.dependsOn('checkstyleHtml')

        // Log instrumentation tests results.
        tasks.withType(com.android.build.gradle.internal.tasks.AndroidTestTask) { task ->
            task.doFirst {
                logging.level = LogLevel.INFO
            }
            task.doLast {
                logging.level = LogLevel.LIFECYCLE
            }
        }
    }
}
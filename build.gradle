/*
 * Copyright 2015 Guillermo Orellana Ruiz
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.2'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath 'me.tatarka:gradle-retrolambda:3.3.1'
        classpath 'me.tatarka.retrolambda.projectlombok:lombok.ast:0.2.3.a2'
        classpath 'com.jakewharton.hugo:hugo-plugin:1.2.1'
        classpath 'com.fernandocejas.frodo:frodo-plugin:0.8.2'
        classpath 'com.trickyandroid:jacoco-everywhere:0.2.1'
    }
    configurations.classpath.exclude group: 'com.android.tools.external.lombok'
}

allprojects {
    repositories {
        jcenter()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }

        maven {
            url "https://jitpack.io"
        }

        maven {
            url 'https://clojars.org/repo/'
        }
    }
    tasks.withType(JavaForkOptions) {
        jvmArgs '-Djava.awt.headless=true'
    }
}

ext {
    minSdk = 16
    targetSdk = 23
    compileSdkVersion = 25
    buildToolsVersion = '25.0.0'

    preDexLibs = !project.hasProperty('disablePreDex')

    javaSourceCompatibility = JavaVersion.VERSION_1_8
    javaTargetCompatibility = JavaVersion.VERSION_1_8

    supportLibsVersion = '25.0.0'
    okHttpVersion = '3.2.0'
    retrofitVersion = '2.0.0-beta4'
    dbflowVersion = 'fix'
}

subprojects {
    apply plugin: 'pmd'

    pmd {
        ignoreFailures = false // Fail early.
        ruleSets = ['java-basic', 'java-braces', 'java-strings', 'java-design', 'java-unusedcode']
    }

    apply plugin: 'findbugs'

    findbugs {
        ignoreFailures = false // Fail early.
        effort = 'default'
        reportLevel = 'low' // Report even low priority problems.


        excludeFilter = rootProject.file('findbugs-filter.xml')
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    apply plugin: 'checkstyle'

    checkstyle {
        configFile rootProject.file('checkstyle.xml')

        ignoreFailures false // Fail early.
        showViolations true
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.enabled true
            html.enabled true
            html.stylesheet resources.text.fromFile(rootProject.file('config/checkstyle-noframes-sorted.xsl'))
        }
    }
}
